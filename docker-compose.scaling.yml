version: '3.8'

services:
  # Redis para estado compartilhado
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_DB: chat_db
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: chat_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d chat_db"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: chat-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - chat-server-1
      - chat-server-2
      - chat-server-3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Instância 1 do Chat Server
  chat-server-1:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat-server-1
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SERVER_ID=server-1
      - DATABASE_URL=postgresql://chat_user:chat_password@postgres:5432/chat_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - BASE_URL_FRONTEND=http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_1:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Instância 2 do Chat Server
  chat-server-2:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat-server-2
    environment:
      - NODE_ENV=production
      - PORT=3002
      - SERVER_ID=server-2
      - DATABASE_URL=postgresql://chat_user:chat_password@postgres:5432/chat_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - BASE_URL_FRONTEND=http://localhost:3000
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_2:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Instância 3 do Chat Server
  chat-server-3:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat-server-3
    environment:
      - NODE_ENV=production
      - PORT=3003
      - SERVER_ID=server-3
      - DATABASE_URL=postgresql://chat_user:chat_password@postgres:5432/chat_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - BASE_URL_FRONTEND=http://localhost:3000
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_3:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  chat-frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-frontend
    environment:
      - VITE_API_URL=http://localhost/api
      - VITE_SOCKET_URL=http://localhost
    ports:
      - "3000:3000"
    depends_on:
      - nginx

  # Redis Insight para monitoramento (opcional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:8001"
    depends_on:
      - redis

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: chat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: chat-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  uploads_1:
  uploads_2:
  uploads_3:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge 